#include "common.h"
#include "./gamelife.h"

/*  Defines  */

const u8 itemsCount = 7;

// 高帕斯滑翔机枪，可以批量制造滑翔机， 就像一个机枪一样，一直再朝着一个方向发射子弹
const u8 GliderGun_Map[] = {
		0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x88, 0x04, 0x04, 0x20, 0x88, 0x70, 0x20, 0x00, 0x00, 0x1C, 0x1C, 0x22, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
// 13*13
const u8 Circleoffire_Map[] = {
		0x00, 0x40, 0x50, 0x54, 0x58, 0x42, 0xBC, 0x42, 0x58, 0x54, 0x50, 0x40, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x08, 0x07, 0x08, 0x03, 0x05, 0x01, 0x00, 0x00,
};
const u8 Circleoffire_Map2[] = {
		0x00, 0x40, 0x50, 0x54, 0x58, 0x42, 0xBC, 0x42, 0x58, 0x54, 0x50, 0x40, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x10, 0x0F, 0x10, 0x03, 0x05, 0x01, 0x00, 0x00,
};
// bilibili
const u8 BlibliTv_Map[512] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x70, 0x70, 0xE0, 0xE0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0x78, 0x3E, 0x1F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x99, 0x9B, 0x9B, 0x9F, 0x9F, 0x9E, 0x9E, 0x9C, 0x9C, 0x98, 0x98, 0x98, 0x9C, 0x9E, 0x9F, 0x9B, 0x99, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x18, 0x18, 0x18, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x83, 0x83, 0xC3, 0xC3, 0x83, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xC3, 0xC3, 0xC3, 0x83, 0x83, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x06, 0x06, 0x07, 0x07, 0x03, 0x03, 0x01, 0xE1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x80, 0xE1, 0xE1, 0x03, 0x03, 0x07, 0x0E, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x83, 0x87, 0x87, 0x8E, 0x8E, 0x87, 0x87, 0x83, 0x87, 0x86, 0x8E, 0x86, 0x87, 0x83, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0x3F, 0x38, 0x38, 0x39, 0x39, 0xF9, 0xF9, 0xB9, 0xB9, 0xF9, 0xF9, 0xF9, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0xF9, 0xF9, 0xF9, 0xB9, 0xB9, 0xF9, 0xF9, 0x39, 0x38, 0x38, 0x3F, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

// 13*13
// http://copy.sh/life/?pattern=hivenudger
const u8 Hivenudger_Map[] = {
	0x07, 0x09, 0x01, 0x01, 0x0a, 0xe0, 0xe0, 0x00, 0x0e, 0x09, 0x08, 0x08, 0x05, 0x1c, 0x12, 0x10, 0x10, 0x0a, 0x00, 0x00, 0x00, 0x0e, 0x12, 0x02, 0x02, 0x14
};

// x = 24, y = 17
// http://copy.sh/life/?pattern=48p31
const u8 HighLife_Map[] = {
	0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x12, 0x09, 0x0e, 0x32, 0x04, 0x04, 0x32, 0x0e, 0x09, 0x12, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x70, 0x90, 0x20, 0xe0, 0x98, 0x40, 0x40, 0x98, 0xe0, 0x20, 0x90, 0x70, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// http://copy.sh/life/?pattern=hammerhead
// http://copy.sh/life/?pattern=fly
// http://copy.sh/life/?pattern=4812diamond

static uint8_t state;
static bool toDraw;
static void draw_blinker(int16_t x0, int16_t y0);
static void draw_beehive(int16_t x0, int16_t y0);
static void draw_block(int16_t x0, int16_t y0);
static void draw_boat(int16_t x0, int16_t y0);
static void draw_toad(int16_t x0, int16_t y0);
static void draw_glider(int16_t x0, int16_t y0);
static void draw_spaceship(int16_t x0, int16_t y0);
static void draw_GliderGun(int16_t x0, int16_t y0);
static void draw_TV(int16_t x0, int16_t y0);
static void draw_Circleoffire(int16_t x0, int16_t y0);
/*---------------------------------------------------------------------------*/
/*                              Main Functions                               */
/*---------------------------------------------------------------------------*/

void initTitle(void)
{
	// state = 0;
	toDraw = true;
}

bool updateTitle(byte btnType)
{
	bool ret = false;

	// 上一类
	if (btnType == BTN_LEFT)
	{
		if (state == 0)
		{
			state = itemsCount;
		}
		else
		{
			state--;
		}

		toDraw = true;
	}
	// 下一类
	else if (btnType == BTN_RIGHT)
	{
		if (state >= itemsCount)
		{
			state = 0;
		}
		else
		{
			state++;
		}
		toDraw = true;
	}
	// 下一mode
	else if (btnType == BTN_FUNC)
	{
		ret = true;
	}
	// 总为true
	toDraw = true;

	return ret;
}

static void draw_header (char *title) {
	draw_string_center(title, 0, 0, FRAME_WIDTH, 0);
}

void gamelife_drawTitle(void)
{
	if (toDraw)
	{
		switch (state)
		{
		case 0:
			draw_header("< BLINKER >");
			draw_toad(62, 25);
			draw_toad(32, 25);
			draw_toad(92, 25);
			draw_blinker(62, 40);
			draw_blinker(32, 40);
			draw_blinker(92, 40);
			break;
		/*
		case 1:
			draw_header("< BEEHIVE >");
			// draw_header("< BOAT >");
			draw_beehive(62, 45);
			draw_beehive(32, 45);
			draw_beehive(92, 45);
			draw_block(62, 30);
			draw_block(32, 30);
			draw_block(92, 30);
			draw_boat(62, 15);
			draw_boat(32, 15);
			draw_boat(92, 15);
			break;
	  */
		case 1:
			draw_header("< GLIDER >");
			draw_glider(32, 30);
			draw_glider(92, 30);
			draw_glider(62, 30);
			break;
		case 2:
			draw_header("< SPACESHIP >");
			draw_spaceship(32, 30);
			draw_spaceship(62, 30);
			draw_spaceship(92, 30);
			break;
		case 3:
			draw_GliderGun(30, 15);
			break;
		case 4:
			draw_Circleoffire((FRAME_WIDTH - 13) / 2, (FRAME_HEIGHT - 13) / 2);
			break;
		case 5:
			draw_header("< Hivenudger >");
			draw_bitmap2(FRAME_WIDTH - 13 - 1, (FRAME_HEIGHT-13)/2, Hivenudger_Map, 13, 13, 0);
			break;
		case 6:
			draw_header("< High Life >");
			draw_bitmap2((FRAME_WIDTH - 24)/2, (FRAME_HEIGHT-17)/2, HighLife_Map, 24, 17, 0);
			break;
		case 7:
			draw_TV(31, 0);
			break;
		default:
			break;
		}
		toDraw = false;
	}
}

// 动画之前先清空header
void clearHeader(void) {
	draw_clearArea(0, 0, FRAME_WIDTH);
}

/*---------------------------------------------------------------------------*/
/*                              Draw Functions                               */
/*---------------------------------------------------------------------------*/

static void draw_blinker(int16_t x0, int16_t y0) //闪光灯 3x1
{
	draw_fill_screen(x0, y0, x0 + 2, y0, 1);
}
static void draw_beehive(int16_t x0, int16_t y0) //蜂窝 3x4
{
	draw_set_point(x0, y0 + 1, 1);
	draw_set_point(x0, y0 + 2, 1);
	draw_set_point(x0 + 1, y0, 1);
	draw_set_point(x0 + 1, y0 + 3, 1);
	draw_set_point(x0 + 2, y0 + 1, 1);
	draw_set_point(x0 + 2, y0 + 2, 1);
}
static void draw_block(int16_t x0, int16_t y0) //小区 2x2
{
	// draw_header("< BLOCK >");
	// FillRect2(x0, y0, 2, 2, 1);
	draw_fill_screen(x0, y0, x0 + 1, y0 + 1, 1);
}
static void draw_boat(int16_t x0, int16_t y0) //小船 3x3
{
	draw_set_point(x0, y0, 1);
	draw_set_point(x0, y0 + 1, 1);
	draw_set_point(x0 + 1, y0, 1);
	draw_set_point(x0 + 2, y0 + 1, 1);
	draw_set_point(x0 + 1, y0 + 2, 1);
}
static void draw_toad(int16_t x0, int16_t y0) //蛤蟆 4x2
{
	// draw_header("< TOAD >");
	draw_fill_screen(x0 + 1, y0, x0 + 3, y0, 1);
	draw_fill_screen(x0, y0 + 1, x0 + 2, y0 + 1, 1);
}
static void draw_glider(int16_t x0, int16_t y0) //滑翔机 3x3
{
	draw_fill_screen(x0, y0, x0 + 2, y0, 1);
	draw_set_point(x0, y0 + 1, 1);
	draw_set_point(x0 + 1, y0 + 2, 1);
}
static void draw_spaceship(int16_t x0, int16_t y0) //太空船 5x4
{
	draw_fill_screen(x0, y0 + 3, x0 + 3, y0 + 3, 1);

	draw_set_point(x0, y0 + 1, 1);
	draw_set_point(x0, y0 + 2, 1);

	draw_set_point(x0 + 1, y0, 1);
	draw_set_point(x0 + 4, y0, 1);

	draw_set_point(x0 + 4, y0 + 2, 1);
}
/*
高帕斯滑翔机枪，可以批量制造滑翔机， 就像一个机枪一样，一直再朝着一个方向发射子弹
*/
static void draw_GliderGun(int16_t x0, int16_t y0) // 滑翔机枪 36x9
{
	draw_header("< GLIDER GUN >");
	// draw_bitmap(x0, y0, GliderGun_Map, 36, 9, 0, 0);
	draw_bitmap2(x0, y0, GliderGun_Map, 36, 9, 0); // 高度是9, 不能用draw_bitmap
}

// https://conwaylife.com/wiki/Category:Animated_images
// https://conwaylife.com/w/images/5/50/Circleoffire.gif
static void draw_Circleoffire(int16_t x0, int16_t y0) //
{
	draw_header("< CIRCLE OFFIRE >");
	draw_bitmap2(1, 8, Circleoffire_Map, 13, 13, 0); // 高度是13, 不能用draw_bitmap
	draw_bitmap2(FRAME_WIDTH - 13 - 1, 8, Circleoffire_Map, 13, 13, 0); // 高度是13, 不能用draw_bitmap
	draw_bitmap2(1, FRAME_HEIGHT - 13 - 8, Circleoffire_Map, 13, 13, 0); // 高度是13, 不能用draw_bitmap
	draw_bitmap2(FRAME_WIDTH - 13 - 1, FRAME_HEIGHT - 13 - 8, Circleoffire_Map, 13, 13, 0); // 高度是13, 不能用draw_bitmap

	draw_bitmap2(x0, y0, Circleoffire_Map2, 13, 13, 0); // 高度是13, 不能用draw_bitmap
}

static void draw_TV(int16_t x0, int16_t y0) // 小电视 64x64
{
	draw_header("< BILIBILI >");
	draw_bitmap(x0, y0, BlibliTv_Map, 64, 64, 0, 0);
}
