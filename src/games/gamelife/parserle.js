
// https://funnyjs.com/jspages/game-of-life.html
// https://github.com/atonasting/game-of-life-js/blob/master/js/lifegamereader.min.js
// 通过rle string读取成一个二维数组
// B3/S23
function readrle(rlestring) {
  var patternrowcount, patterncolcount;
  var rledata = "";
  var dataline = 0;
  var rlelines = rlestring.split("\n");
  if (rlelines.length < 2) return null;
  for (var i = 0; i < rlelines.length; i++) {
    if (rlelines[i].indexOf("#") != 0) {
      var line = rlelines[i].replace(/\s/g, "");
      if (dataline != 0 && i >= dataline) {
        rledata += line;
      } else if (line.indexOf("x=") != -1 && line.indexOf("y=") != -1) {
        dataline = i + 1;
        var defn = line.split(",");
        for (var j = 0; j < defn.length; j++) {
          if (defn[j].indexOf("x=") == 0) patterncolcount = parseInt(defn[j].substring(2)); else if (defn[j].indexOf("y=") == 0) patternrowcount = parseInt(defn[j].substring(2));
        }
      }
    }
  }
  var data = new Array();
  var c = 0;
  var ns = "";
  var row = 0, col = 0;
  data[row] = new Array();
  while (c < rledata.length) {
    var r = rledata[c];
    if (r >= "0" && r <= "9") {
      ns += r;
    } else {
      var num = parseInt(ns);
      if (isNaN(num)) num = 1;
      if (r == "b") {
        for (var i = 0; i < num; i++) {
          data[row][col] = false;
          col++;
        }
      } else if (r == "o") {
        for (var i = 0; i < num; i++) {
          data[row][col] = true;
          col++;
        }
      } else if (r == "$") {
        var lefttcol = patterncolcount - col;
        for (var i = 0; i < lefttcol; i++) {
          data[row][col] = false;
          col++;
        }
        row++;
        data[row] = new Array();
        col = 0;
        for (var i = 0; i < num - 1; i++) {
          for (var j = 0; j < patterncolcount; j++) {
            data[row][j] = false;
          }
          row++;
          data[row] = new Array();
        }
      } else if (r == "!") {
        var lefttcol = patterncolcount - col;
        for (var i = 0; i < lefttcol; i++) {
          data[row][col] = false;
          col++;
        }
        var leftrow = patternrowcount - row;
        for (var i = 0; i < leftrow; i++) {
          row++;
          data[row] = new Array();
          for (var j = 0; j < patterncolcount; j++) {
            data[row][j] = false;
          }
        }
        break;
      }
      ns = "";
    }
    c++;
  }
  return data;
}

/*
转成C hex 列行式, 低位在前
00101111 = !
*/
function arrToC(arr) {
  let lines = arr.length;
  let cols = arr[0].length;

  let ret = []
  // 每8行为处理成一个数据
  let lineNo = 0
  while (1) {
    for (let colNo = 0; colNo < cols; ++colNo) {
      let byte = [0, 0, 0, 0, 0, 0, 0, 0] // 1111000
      for (k = 0; k < 8 && lineNo + k < lines; ++k) {
        let bit = arr[lineNo + k][colNo]
        byte[7-k] = bit ? 1 : 0
      }
      // 逆向, 低位在前
      // byte.reverse()
      const byteStr = byte.join('')
      // 转成二进制, 再转在数字
      ret.push(+('0b' + byteStr))
    }
    lineNo += 8
    if (lineNo >= lines) {
      break;
    }
  }
  return ret;
}

function toHex (num) {
  let hex = num.toString('16')
  if (hex.length === 1) {
      hex = '0' + hex
  }
  return '0x' + hex
}

function showCArr (arr) {
  let str = ''
  arr.forEach((item, i) => {
    str += toHex(item)
    if (i !== arr.length - 1) {
        str += ', '
    }
  })
  console.log(str)
}

var str = `#N Hivenudger
#O Hartmut Holzwart
#C A period 4 c/2 orthogonal spaceship.
#C www.conwaylife.com/wiki/index.php?title=Hivenudger
x = 13, y = 13, rule = B3/S23
4o5bo2bo$o3bo3bo4b$o7bo3bo$bo2bo3b4ob2$5b2o6b$5b2o6b$5b2o6b2$bo2bo3b4o
b$o7bo3bo$o3bo3bo4b$4o5bo2bo!`

// B36/S23 的不支持
str = `#N Replicator-based period 96 oscillator in HighLife (B36/S23)
#O 
#C http://conwaylife.com/wiki/HighLife
x = 35, y = 19, rule = B36/S23
2o33b$2o10bo22b$11b2o22b$10bobo22b$9b3o23b$35b$15b3o17b$14bobo18b$14b2o19b$
14bo20b$35b$35b$35b$35b$35b$35b$35b$33b2o$33b2o!`

// http://copy.sh/life/?pattern=48p31
str = `#C Generated by copy.sh/life
x = 24, y = 17, rule = B3/S23
8bo6bo$7bob2o2b2obo$6bo2bob2obo2bo$2o4bob2o4b2obo4b2o$2o4b2o2bo2bo2b2o
4b2o$10bo2bo$$$$$$10bo2bo$2o4b2o2bo2bo2b2o4b2o$2o4bob2o4b2obo4b2o$6bo
2bob2obo2bo$7bob2o2b2obo$8bo6bo!`
// 0x07, 0x09, 0x01, 0x01, 0x0a, 0xe0, 0xe0, 0x00, 0x0e, 0x09, 0x08, 0x08, 0x05, 0x1c, 0x12, 0x10, 0x10, 0x0a, 0x00, 0x00, 0x00, 0x0e, 0x12, 0x02, 0x02, 0x14

let arr = readrle(str)
console.log(arr)
let cArr = arrToC(arr)
showCArr(cArr)